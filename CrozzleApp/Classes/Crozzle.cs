using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;

namespace CrozzleApp.Classes
{
    class Crozzle
    {
        // Create a Log object
        Log log;

        // Create a Configuration object
        Configuration configuration;

        // Create a Words object
        Words wordList;

        // Create a Grid object
        Grid grid;

        /* 
         * Dictionary organizes key value 
         * pairs to be used in ValidadeFile
         * and ValidadeCrozzle
        */
        private Dictionary<string, string> lines = new Dictionary<string, string>();

        /* 
         * Crozzle Size.
         * The number of rows and columns.
         * It must be generated by Grid.
        */
        private int rows;
        private int columns;

        private string root;
        private string filePath;

        public int Rows { get => rows; private set => rows = value; }
        public int Columns { get => columns; private set => columns = value; }

        //OpenFileDialog pass TXT as a parameter in Crozzle class
        public Crozzle(string file)
        {
            log = new Log();
            root = Path.GetDirectoryName(file);
            ReadFile(file);
            ValidateFile();
            ValidadeCrozzle();
        }

        private int CheckNumber(string key, string value)
        {
            int number = 0;
            try
            {
                number = int.Parse(value);
                if (number < 1)
                {
                    Console.WriteLine("Key {0} has value {1}", key, number);
                    //throw new Exception("Value is smaller than 1");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            return number;
        }

        #region CROZZLE METHODS
        //TODO ReadFile here, use system IO
        private void ReadFile(string file)
        {
            try
            {
                using (StreamReader sr = new StreamReader(file))
                {
                    string line;

                    while ((line = sr.ReadLine()) != null)
                    {
                        line = line.Replace("\"", "");
                        int index = line.IndexOf(@"//");

                        if (index >= 0)
                        {
                            line = line.Remove(index);
                            line = line.Trim();
                        }
                        if (string.IsNullOrEmpty(line) || line.StartsWith(@"//"))
                        {
                            continue;
                        }
                        
                        string[] keyValuePair = line.Split(new char[] { '=' });
                        lines.Add(keyValuePair[0], keyValuePair[1]);                         
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        //TODO Validate itens
        private void ValidateFile()
        {
            foreach (KeyValuePair<string, string> pair in lines)
            {
                switch(pair.Key)
                {
                    case "CONFIGURATION_FILE":
                        filePath = root + (pair.Value).Remove(0, 1);
                        configuration = new Configuration(filePath);
                        break;
                    case "WORDLIST_FILE":
                        filePath = root + pair.Value.Remove(0, 1);
                        wordList = new Words(filePath);
                        break;
                    case "ROWS":
                        Rows = CheckNumber(pair.Key, pair.Value);
                        break;
                    case "COLUMNS":
                        Columns = CheckNumber(pair.Key, pair.Value);
                        break;
                        // TODO Explode each ROW to call GRID
                        // TODO Explode each COLUMN to call GRID
                }
            }
        }

        private void ValidadeCrozzle()
        {
            // TODO Implement if valid then instatiate the Grid class
            grid = new Grid(rows, columns);
        }
        #endregion
    }
}
