using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;

namespace CrozzleApp.Classes
{
    class Crozzle
    {
        // Determines if the file is valid
        private bool valid = true;

        // Create a Configuration object
        Configuration configuration;

        // Create a Words object
        Words wordList;

        // Create a Grid object
        Grid grid;

        /* 
         * List of KeyValuePair organizes key value 
         * pairs to be used in ValidadeFile
         * and ValidadeCrozzle
        */
        private List<KeyValuePair<string, string>> lines = new List<KeyValuePair<string, string>>();

        /* 
         * Crozzle Size.
         * The number of rows and columns.
         * It must be generated by Grid.
        */
        private int rows;

        private int columns;

        private string root;

        private string filePath;

        private List<Tuple<int, string, int>> dataRowList = new List<Tuple<int, string, int>>();
        private List<Tuple<int, string, int>> dataColList = new List<Tuple<int, string, int>>();

        public int Rows { get => rows; private set => rows = value; }
        public int Columns { get => columns; private set => columns = value; }
        public bool Valid
        {
            get => valid;
            private set => valid = value;
        }

        //OpenFileDialog passes file as a parameter in Crozzle class
        public Crozzle(string file)
        {
            root = Path.GetDirectoryName(file);
            ReadFile(file);
            ValidateFile();
            ValidadeCrozzle();
        }

        #region CROZZLE METHODS
        //TODO ReadFile here, use system IO
        private void ReadFile(string file)
        {
            try
            {
                using (StreamReader sr = new StreamReader(file))
                {
                    string line;

                    while ((line = sr.ReadLine()) != null)
                    {
                        line = line.Replace("\"", "");

                        line = line.Trim();

                        int index = line.IndexOf(@"//");

                        if (index >= 0)
                        {
                            line = line.Remove(index);
                            line = line.Trim();
                        }
                        if (string.IsNullOrEmpty(line) || line.StartsWith(@"//"))
                        {
                            continue;
                        }
                        
                        string[] keyValuePair = line.Split(new char[] { '=' });

                        if (keyValuePair.Length == 2)
                        {
                            lines.Add(new KeyValuePair<string, string>(keyValuePair[0], keyValuePair[1]));
                        }
                        else
                        {
                            valid = false;
                            Exception ex = new IndexOutOfRangeException();
                            Log.logs.Add(keyValuePair[0] + " - " + ex.Message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                valid = false;
                Log.logs.Add(ex.Message);
            }
        }

        //TODO Validate itens
        private void ValidateFile()
        {
            foreach (KeyValuePair<string, string> pair in lines)
            {
                switch(pair.Key)
                {
                    case "CONFIGURATION_FILE":
                        filePath = root + (pair.Value).Remove(0, 1);
                        configuration = new Configuration(filePath);
                        break;
                    case "WORDLIST_FILE":
                        filePath = root + pair.Value.Remove(0, 1);
                        wordList = new Words(filePath);
                        break;
                    case "ROWS":
                        Rows = CheckNumber(pair.Key, pair.Value);
                        break;
                    case "COLUMNS":
                        Columns = CheckNumber(pair.Key, pair.Value);
                        break;
                    case "ROW":
                        CheckWordData(pair.Key, pair.Value);
                        break;
                    case "COLUMN":
                        CheckWordData(pair.Key, pair.Value);
                        break;
                }
            }
        }

        private void ValidadeCrozzle()
        {
            // TODO Implement if valid then instatiate the Grid class
            if (valid == true && configuration.Valid == true && wordList.Valid == true)
            {
                grid = new Grid(rows, columns);
            }

        }

        private void CheckWordData(string key, string value)
        {
            int firstNumber;
            int secondNumber;
            string name;

            string[] values = value.Split(new char[] { ',' });

            if (values.Length == 3)
            {
                name = CheckName(key, values[1]);
                firstNumber = CheckNumber(key, values[0]);
                secondNumber = CheckNumber(key, values[2]);

                if (firstNumber > 0 && secondNumber > 0 && name != null)
                {
                    if (key == "ROW")
                    {
                        dataRowList.Add(new Tuple<int, string, int>(firstNumber, name, secondNumber));
                    }
                    else
                    {
                        dataColList.Add(new Tuple<int, string, int>(firstNumber, name, secondNumber));
                    }
                }
                else
                {
                    valid = false;
                }
                
            }
        }

        private string CheckName(string key, string name)
        {
            Match match = Regex.Match(name, @"(^[a-zA-Z]\w*$)");
            if (!match.Success)
            {
                Log.logs.Add(key + " - " + "Invalid name: " + name);
                return null;
            }
            else
            {
                return name;
            }
        }

        private int CheckNumber(string key, string value)
        {
            int number = 0;
            try
            {
                number = int.Parse(value);
                if (number < 1)
                {
                    valid = false;
                    Log.logs.Add(key + " - Has value smaller than 1: " + number);
                }
            }
            catch (Exception ex)
            {
                valid = false;
                Log.logs.Add(key + " - " + ex.Message);
            }
            return number;
        }
        #endregion
    }
}
